(function() {
  ex.Orbitable = (function() {
    function Orbitable(lat, lng, lngVelocity, latVelocity, altitude) {
      this.lat = lat != null ? lat : 0;
      this.lng = lng != null ? lng : 0;
      this.lngVelocity = lngVelocity != null ? lngVelocity : 0;
      this.latVelocity = latVelocity != null ? latVelocity : 0;
      this.altitude = altitude != null ? altitude : 0;
    }

    Orbitable.prototype.build = function() {
      this.node = document.createElement('div');
      this.shadowNode = document.createElement('div');
      this.node.className = this.getClassName();
      this.shadowNode.className = 'shadow';
      return [this.node, this.shadowNode];
    };

    Orbitable.prototype.getClassName = function() {
      return 'cloud';
    };

    Orbitable.prototype.animate = function(t) {
      var dist, front, ref, rotate, x, xShadow, y, yShadow, zindex;
      this.lng += this.lngVelocity * t;
      this.lat += this.latVelocity * t;
      if (this.lng > 180) {
        this.lng = -180;
      }
      if (this.lng < -180) {
        this.lng = 180;
      }
      if (this.lat > 180) {
        this.lat = -180;
      }
      if (this.lat < -180) {
        this.lat = 180;
      }
      x = Math.sin(ex.deg2rad(this.lat)) * (128 + this.altitude) * Math.abs(Math.sin(ex.deg2rad(90 + this.lng)));
      y = Math.cos(ex.deg2rad(90 + this.lng)) * (128 + this.altitude);
      xShadow = Math.sin(ex.deg2rad(this.lat)) * 128 * Math.abs(Math.sin(ex.deg2rad(90 + this.lng)));
      yShadow = Math.cos(ex.deg2rad(90 + this.lng)) * 128;
      dist = Math.max(Math.sqrt(x * x + y * y) - this.altitude, 0);
      rotate = Math.atan2(y, x);
      front = (90 >= (ref = this.lat) && ref >= -90);
      zindex = front ? 10 + Math.round(128 - dist) : 0;
      this.node.setAttribute('style', ("top: " + (128 + y) + "px;\nleft: " + (128 + x) + "px;\nz-index: " + zindex + ";\n" + (this.getStyle(front, x, y, rotate, dist))).replace(/\s+/g, ' '));
      return this.shadowNode.setAttribute('style', ("top: " + (128 + yShadow) + "px;\nleft: " + (128 + xShadow) + "px;\nz-index: " + (front ? 1 : -1) + ";\n" + (this.getShadowStyle(front, x, y, rotate, dist))).replace(/\s+/g, ' '));
    };

    return Orbitable;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvYWltb3JyaXMvLmF0b20vcGFja2FnZXMvbGluZS1jb3VudC90ZXN0L2V4b3BsYW5ldHMvYXBwL2Fzc2V0cy9qYXZhc2NyaXB0cy9wbGFuZXRzL29yYml0YWJsZS5qcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBTSxFQUFFLENBQUM7SUFDTSxtQkFBQyxHQUFELEVBQ0MsR0FERCxFQUVDLFdBRkQsRUFHQyxXQUhELEVBSUMsUUFKRDtNQUFDLElBQUMsQ0FBQSxvQkFBRCxNQUFLO01BQ0wsSUFBQyxDQUFBLG9CQUFELE1BQUs7TUFDTCxJQUFDLENBQUEsb0NBQUQsY0FBYTtNQUNiLElBQUMsQ0FBQSxvQ0FBRCxjQUFhO01BQ2IsSUFBQyxDQUFBLDhCQUFELFdBQVU7SUFKWDs7d0JBTWIsS0FBQSxHQUFPLFNBQUE7TUFDTCxJQUFDLENBQUEsSUFBRCxHQUFRLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCO01BQ1IsSUFBQyxDQUFBLFVBQUQsR0FBYyxRQUFRLENBQUMsYUFBVCxDQUF1QixLQUF2QjtNQUVkLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixHQUFrQixJQUFDLENBQUEsWUFBRCxDQUFBO01BQ2xCLElBQUMsQ0FBQSxVQUFVLENBQUMsU0FBWixHQUF3QjthQUV4QixDQUFDLElBQUMsQ0FBQSxJQUFGLEVBQVEsSUFBQyxDQUFBLFVBQVQ7SUFQSzs7d0JBU1AsWUFBQSxHQUFjLFNBQUE7YUFBRztJQUFIOzt3QkFFZCxPQUFBLEdBQVMsU0FBQyxDQUFEO0FBQ1AsVUFBQTtNQUFBLElBQUMsQ0FBQSxHQUFELElBQVEsSUFBQyxDQUFBLFdBQUQsR0FBZTtNQUN2QixJQUFDLENBQUEsR0FBRCxJQUFRLElBQUMsQ0FBQSxXQUFELEdBQWU7TUFFdkIsSUFBZSxJQUFDLENBQUEsR0FBRCxHQUFRLEdBQXZCO1FBQUEsSUFBQyxDQUFBLEdBQUQsR0FBTyxDQUFDLElBQVI7O01B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TDhCLENBS3RCLE1BTHNCLEVBS2QsR0FMYyxDQUFsQztJQXpCTzs7Ozs7QUFsQlgiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBleC5PcmJpdGFibGVcbiAgY29uc3RydWN0b3I6IChAbGF0PTAsXG4gICAgICAgICAgICAgICAgQGxuZz0wLFxuICAgICAgICAgICAgICAgIEBsbmdWZWxvY2l0eT0wLFxuICAgICAgICAgICAgICAgIEBsYXRWZWxvY2l0eT0wLFxuICAgICAgICAgICAgICAgIEBhbHRpdHVkZT0wKSAtPlxuXG4gIGJ1aWxkOiAtPlxuICAgIEBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnZGl2J1xuICAgIEBzaGFkb3dOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnZGl2J1xuXG4gICAgQG5vZGUuY2xhc3NOYW1lID0gQGdldENsYXNzTmFtZSgpXG4gICAgQHNoYWRvd05vZGUuY2xhc3NOYW1lID0gJ3NoYWRvdydcblxuICAgIFtAbm9kZSwgQHNoYWRvd05vZGVdXG5cbiAgZ2V0Q2xhc3NOYW1lOiAtPiAnY2xvdWQnXG5cbiAgYW5pbWF0ZTogKHQpIC0+XG4gICAgQGxuZyArPSBAbG5nVmVsb2NpdHkgKiB0XG4gICAgQGxhdCArPSBAbGF0VmVsb2NpdHkgKiB0XG5cbiAgICBAbG5nID0gLTE4MCBpZiBAbG5nID4gIDE4MFxuICAgIEBsbmcgPSAgMTgwIGlmIEBsbmcgPCAtMTgwXG4gICAgQGxhdCA9IC0xODAgaWYgQGxhdCA+ICAxODBcbiAgICBAbGF0ID0gIDE4MCBpZiBAbGF0IDwgLTE4MFxuXG4gICAgeCA9IE1hdGguc2luKGV4LmRlZzJyYWQgQGxhdCkgKiAoMTI4ICsgQGFsdGl0dWRlKSAqIE1hdGguYWJzIE1hdGguc2luKGV4LmRlZzJyYWQgOTArQGxuZylcbiAgICB5ID0gTWF0aC5jb3MoZXguZGVnMnJhZCA5MCtAbG5nKSAqICgxMjggKyBAYWx0aXR1ZGUpXG4gICAgeFNoYWRvdyA9IE1hdGguc2luKGV4LmRlZzJyYWQgQGxhdCkgKiAxMjggKiBNYXRoLmFicyBNYXRoLnNpbihleC5kZWcycmFkIDkwK0BsbmcpXG4gICAgeVNoYWRvdyA9IE1hdGguY29zKGV4LmRlZzJyYWQgOTArQGxuZykgKiAxMjhcbiAgICBkaXN0ID0gTWF0aC5tYXgoTWF0aC5zcXJ0KHgqeCArIHkqeSkgLSBAYWx0aXR1ZGUsIDApXG4gICAgcm90YXRlID0gTWF0aC5hdGFuMiB5LCB4XG4gICAgZnJvbnQgPSA5MCA+PSBAbGF0ID49IC05MFxuICAgIHppbmRleCA9IGlmIGZyb250IHRoZW4gMTAgKyBNYXRoLnJvdW5kKDEyOCAtIGRpc3QpIGVsc2UgMFxuXG4gICAgQG5vZGUuc2V0QXR0cmlidXRlICdzdHlsZScsIFwiXCJcIlxuICAgICAgdG9wOiAjezEyOCt5fXB4O1xuICAgICAgbGVmdDogI3sxMjgreH1weDtcbiAgICAgIHotaW5kZXg6ICN7emluZGV4fTtcbiAgICAgICN7QGdldFN0eWxlIGZyb250LCB4LCB5LCByb3RhdGUsIGRpc3R9XG4gICAgXCJcIlwiLnJlcGxhY2UgL1xccysvZywgJyAnXG5cbiAgICBAc2hhZG93Tm9kZS5zZXRBdHRyaWJ1dGUgJ3N0eWxlJywgXCJcIlwiXG4gICAgICB0b3A6ICN7MTI4K3lTaGFkb3d9cHg7XG4gICAgICBsZWZ0OiAjezEyOCt4U2hhZG93fXB4O1xuICAgICAgei1pbmRleDogI3tpZiBmcm9udCB0aGVuIDEgZWxzZSAtMX07XG4gICAgICAje0BnZXRTaGFkb3dTdHlsZSBmcm9udCwgeCwgeSwgcm90YXRlLCBkaXN0fVxuICAgIFwiXCJcIi5yZXBsYWNlIC9cXHMrL2csICcgJ1xuIl19

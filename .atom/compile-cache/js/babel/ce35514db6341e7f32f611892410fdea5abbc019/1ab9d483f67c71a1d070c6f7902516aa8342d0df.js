function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

// import SelectTextBetweenTags from '../lib/select-text-between-tags';

var _constantsFixturesPath = require('./constants/fixtures-path');

var _constantsFixturesPath2 = _interopRequireDefault(_constantsFixturesPath);

var _helpersSpecHelpers = require('./helpers/spec-helpers');

var _helpersSpecHelpers2 = _interopRequireDefault(_helpersSpecHelpers);

var _scriptsCreateLargeText = require('./scripts/create-large-text');

var _scriptsCreateLargeText2 = _interopRequireDefault(_scriptsCreateLargeText);

var _scriptsCreateDeepText = require('./scripts/create-deep-text');

var _scriptsCreateDeepText2 = _interopRequireDefault(_scriptsCreateDeepText);

// Use the command `window:run-package-specs` (cmd-alt-ctrl-p) to run specs.
//
// To run a specific `it` or `describe` block add an `f` to the front (e.g. `fit`
// or `fdescribe`). Remove the `f` to unfocus the block.

'use babel';describe('select-text-between-tags', function () {
  beforeEach(function () {
    atom.packages.activatePackage('select-text-between-tags');
  });

  describe('when the :select event is triggred', function () {
    var runCommand = 'select-text-between-tags:select';

    describe('it selects text between tags', function () {
      var sampleTextPath = _constantsFixturesPath2['default'].sampleTextPath;
      var selectionHello = {
        range: [[8, 39], [8, 68]],
        text: 'Hello! This is a sample file.'
      };

      // NOTE: I wanna use 'beforeAll' to avoid to call this many times,
      // but unfortunetely our Jasmine's version is probably 1.3.1.
      beforeEach(function () {
        // NOTE: It needs to be done in order to get an active text editor
        // in each spec.
        waitsForPromise(function () {
          return atom.workspace.open(sampleTextPath);
        });
      });

      // NOTE: An arrow function cannot be used, cuz it makes 'this' indicate
      // an unexpected object.
      it('does when the cursor is as <foo>ab[I]cd</foo>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 56]
        };
        var textVerificationOptions = [{ range: [[8, 54], [8, 62]], text: 'a sample' }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as <foo>[I]abcd</foo>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 39]
        };
        var textVerificationOptions = [{ range: [[8, 39], [8, 45]], text: 'Hello!' }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as <foo>abcd[I]</foo>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 68]
        };
        var textVerificationOptions = [{ range: [[8, 63], [8, 68]], text: 'file.' }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as <fo[I]o>abcd</foo>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 12]
        };
        var textVerificationOptions = [{ range: [[8, 7], [8, 22]], text: "span id='title'" }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as <foo>abcd</fo[I]o>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 72]
        };
        var textVerificationOptions = [{ range: [[8, 69], [8, 74]], text: '/span' }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as [I]<foo>abcd</foo>', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 6]
        };
        var textVerificationOptions = [{ range: [[8, 6], [8, 22]], text: "<span id='title'" }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('does when the cursor is as <foo>abcd</foo>[I]', function () {
        var stateBeforeRun = {
          cursorPosition: [8, 75]
        };
        var textVerificationOptions = [{ range: [[8, 68], [8, 75]], text: '</span>' }];
        var expectedState = {
          selection: selectionHello
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      // A canceled idea.
      xit('selects latter text when the cursor is ' + 'as <foo>abcd</foo>[I]<bar>efgh</bar>', function () {
        var stateBeforeRun = {
          cursorPosition: [9, 34]
        };
        var textVerificationOptions = [{ range: [[9, 27], [9, 34]], text: '</span>' }, { range: [[9, 34], [9, 51]], text: "<span id='right'>" }];
        var expectedState = {
          selection: {
            range: [[9, 51], [9, 57]],
            text: 'b a r'
          }
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('can selects multiline', function () {
        var stateBeforeRun = {
          cursorPosition: [11, 19]
        };
        var textVerificationOptions = [{ range: [[11, 16], [11, 20]], text: 'used' }];
        var expectedState = {
          selection: {
            range: [[10, 23], [13, 6]],
            text: '\n        This is used for tests.\n        <strong>If you edit this, the tests may break.</strong>\n      '
          }
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      it('skips empty elements like <br>', function () {
        var stateBeforeRun = {
          cursorPosition: [16, 37]
        };
        var textVerificationOptions = [{ range: [[16, 34], [16, 42]], text: 'contains' }];
        var expectedState = {
          selection: {
            range: [[16, 26], [16, 58]],
            text: 'This<br>contains<br>breaks.<br/>' }
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });

      // TODO: Implement a <li> pattern.
      xit('does when the cursor is as <li>ab[I]cd<li>efgh ' + 'about tags like <li>, which end tag can be omitted', function () {
        var stateBeforeRun = {
          cursorPosition: [18, 22]
        };
        var textVerificationOptions = [{ range: [[18, 20], [18, 23]], text: '2nd' }];
        var expectedState = {
          selection: {
            range: [[18, 20], [18, 24]],
            text: '2nd ' }
        };

        _helpersSpecHelpers2['default'].expectSelection(this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);
      });
    });

    describe('it is fast enough', function () {
      it('is when text is large', function () {
        var _this = this;

        var textPath = _constantsFixturesPath2['default'].largeTextPath;
        waitsForPromise(_asyncToGenerator(function* () {
          yield (0, _scriptsCreateLargeText2['default'])();
          yield atom.workspace.open(textPath);
        }));

        var stateBeforeRun = {
          cursorPosition: [9999, 23]
        };
        var textVerificationOptions = [{ range: [[9999, 22], [9999, 24]], text: 'is' }];
        var expectedState = {
          selection: {
            range: [[9999, 17], [9999, 34]],
            text: 'This is contents.' }
        };
        runs(function () {
          var result = _helpersSpecHelpers2['default'].expectSelection(_this, stateBeforeRun, runCommand, expectedState, textVerificationOptions);

          console.log('Performance when text is large: ' + (result.elaspedMs + 'ms'));
          // NOTE: Required speed is defined just with my feelings.
          expect(result.elaspedMs).toBeLessThan(300);
        });
      });

      it('is when text is nested deeply', function () {
        var _this2 = this;

        var textPath = _constantsFixturesPath2['default'].deepTextPath;
        waitsForPromise(_asyncToGenerator(function* () {
          yield (0, _scriptsCreateDeepText2['default'])();
          yield atom.workspace.open(textPath);
        }));

        var stateBeforeRun = {
          cursorPosition: [7003, 24]
        };
        var textVerificationOptions = [{ range: [[7003, 23], [7003, 25]], text: 'is' }];
        var expectedState = {
          selection: {
            range: [[7003, 18], [7003, 35]],
            text: 'This is contents.' }
        };
        runs(function () {
          var result = _helpersSpecHelpers2['default'].expectSelection(_this2, stateBeforeRun, runCommand, expectedState, textVerificationOptions);

          console.log('Performance when text is nested deeply: ' + (result.elaspedMs + 'ms'));
          // NOTE: Required speed is defined just with my feelings.
          expect(result.elaspedMs).toBeLessThan(300);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
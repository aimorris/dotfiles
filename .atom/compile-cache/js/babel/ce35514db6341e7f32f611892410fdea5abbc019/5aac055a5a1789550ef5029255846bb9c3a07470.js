function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libHelpersCommonHelpers = require('../lib/helpers/common-helpers');

var _libHelpersCommonHelpers2 = _interopRequireDefault(_libHelpersCommonHelpers);

'use babel';

describe('CommonHelpers', function () {
  describe('overwriteArray', function () {
    it('does', function () {
      expect(_libHelpersCommonHelpers2['default'].overwriteArray([10, 20], [100, undefined, 300])).toEqual([100, 20, 300]);
      expect(_libHelpersCommonHelpers2['default'].overwriteArray([10, undefined, 30], [100, 200])).toEqual([100, 200, 30]);
    });
  });

  describe('range', function () {
    it('throw errors when arguments are invalid', function () {
      expect(function () {
        return _libHelpersCommonHelpers2['default'].range();
      }).toThrow('No arguments.');

      expect(function () {
        return _libHelpersCommonHelpers2['default'].range(1, 2, 3, 4);
      }).toThrow('Too many arguments.');
      expect(function () {
        return _libHelpersCommonHelpers2['default'].range(1, 2, 3, 4, 5);
      }).toThrow('Too many arguments.');

      expect(function () {
        return _libHelpersCommonHelpers2['default'].range(1, 2, 0);
      }).toThrow('An endless loop.');
    });

    it('does', function () {
      expect(_libHelpersCommonHelpers2['default'].range(5)).toEqual([0, 1, 2, 3, 4, 5]);
      expect(_libHelpersCommonHelpers2['default'].range(5, 10)).toEqual([5, 6, 7, 8, 9, 10]);

      expect(_libHelpersCommonHelpers2['default'].range(5, 11, 2)).toEqual([5, 7, 9, 11]);
      expect(_libHelpersCommonHelpers2['default'].range(5, 12, 2)).toEqual([5, 7, 9, 11]);
      expect(_libHelpersCommonHelpers2['default'].range(-5, -11, -2)).toEqual([-5, -7, -9, -11]);
      expect(_libHelpersCommonHelpers2['default'].range(-5, -12, -2)).toEqual([-5, -7, -9, -11]);
      expect(_libHelpersCommonHelpers2['default'].range(3, -3, -2)).toEqual([3, 1, -1, -3]);

      expect(_libHelpersCommonHelpers2['default'].range(5, 5, 1)).toEqual([5]);
      expect(_libHelpersCommonHelpers2['default'].range(5, 4, 1)).toEqual([]);
      expect(_libHelpersCommonHelpers2['default'].range(-5, -5, -1)).toEqual([-5]);
      expect(_libHelpersCommonHelpers2['default'].range(-5, -4, -1)).toEqual([]);
    });
  });

  describe('times', function () {
    it('does', function () {
      var num0 = 0;
      _libHelpersCommonHelpers2['default'].times(0, function () {
        return num0++;
      });
      expect(num0).toBe(0);

      var num1 = 0;
      _libHelpersCommonHelpers2['default'].times(1, function () {
        return num1++;
      });
      expect(num1).toBe(1);

      var num2 = 0;
      _libHelpersCommonHelpers2['default'].times(2, function () {
        return num2++;
      });
      expect(num2).toBe(2);
    });
  });

  describe('last', function () {
    it('does', function () {
      expect(_libHelpersCommonHelpers2['default'].last([])).toBe(undefined);
      expect(_libHelpersCommonHelpers2['default'].last([10])).toBe(10);
      expect(_libHelpersCommonHelpers2['default'].last([10, 20])).toBe(20);
      expect(_libHelpersCommonHelpers2['default'].last([10, 20, 30])).toBe(30);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
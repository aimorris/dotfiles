function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _srcRules = require('../src/rules');

var _srcRules2 = _interopRequireDefault(_srcRules);

'use babel';

describe('The Rules class', function () {
  describe('replaceRules', function () {
    var ruleArray = [['foo', { meta: { fixable: true } }], ['bar', { meta: {} }]];

    it('adds new rules', function () {
      var rules = new _srcRules2['default']();
      expect(rules.getRules()).toEqual(new Map());
      rules.replaceRules(ruleArray);
      expect(rules.getRules()).toEqual(new Map(ruleArray));
    });

    it('removes old rules', function () {
      var rules = new _srcRules2['default']();
      rules.replaceRules(ruleArray);
      expect(rules.getRules()).toEqual(new Map(ruleArray));
      rules.replaceRules([]);
      expect(rules.getRules()).toEqual(new Map());
    });

    it('updates the fixableRules list', function () {
      var rules = new _srcRules2['default']();
      expect(rules.getFixableRules()).toEqual([]);
      rules.replaceRules(ruleArray);
      expect(rules.getFixableRules()).toEqual(['foo']);
    });
  });

  describe('getRuleUrl', function () {
    it('works with rules that define their own URL', function () {
      var rules = new _srcRules2['default']();
      rules.replaceRules([['foo', { meta: { docs: { url: 'bar' } } }]]);
      expect(rules.getRuleUrl('foo')).toBe('bar');
    });

    it('works with rules defined in eslint-rule-documentation', function () {
      var rules = new _srcRules2['default']();
      var url = 'https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-duplicates.md';
      expect(rules.getRuleUrl('import/no-duplicates')).toBe(url);
    });

    it('gives a fallback URL on how to add a rule URL', function () {
      var rules = new _srcRules2['default']();
      var url = 'https://github.com/jfmengels/eslint-rule-documentation/blob/master/contributing.md';
      expect(rules.getRuleUrl('foo/bar')).toBe(url);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FpbW9ycmlzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1lc2xpbnQvc3BlYy9ydWxlcy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O3dCQUVrQixjQUFjOzs7O0FBRmhDLFdBQVcsQ0FBQTs7QUFJWCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBTTtBQUNoQyxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07QUFDN0IsUUFBTSxTQUFTLEdBQUcsQ0FDaEIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUNwQyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFBOztBQUVELE1BQUUsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0FBQ3pCLFVBQU0sS0FBSyxHQUFHLDJCQUFXLENBQUE7QUFDekIsWUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUE7QUFDM0MsV0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM3QixZQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7S0FDckQsQ0FBQyxDQUFBOztBQUVGLE1BQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0FBQzVCLFVBQU0sS0FBSyxHQUFHLDJCQUFXLENBQUE7QUFDekIsV0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM3QixZQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7QUFDcEQsV0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN0QixZQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQTtLQUM1QyxDQUFDLENBQUE7O0FBRUYsTUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQU07QUFDeEMsVUFBTSxLQUFLLEdBQUcsMkJBQVcsQ0FBQTtBQUN6QixZQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzNDLFdBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDN0IsWUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7S0FDakQsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBOztBQUVGLFVBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtBQUMzQixNQUFFLENBQUMsNENBQTRDLEVBQUUsWUFBTTtBQUNyRCxVQUFNLEtBQUssR0FBRywyQkFBVyxDQUFBO0FBQ3pCLFdBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDakUsWUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDNUMsQ0FBQyxDQUFBOztBQUVGLE1BQUUsQ0FBQyx1REFBdUQsRUFBRSxZQUFNO0FBQ2hFLFVBQU0sS0FBSyxHQUFHLDJCQUFXLENBQUE7QUFDekIsVUFBTSxHQUFHLEdBQUcsMkZBQTJGLENBQUE7QUFDdkcsWUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUMzRCxDQUFDLENBQUE7O0FBRUYsTUFBRSxDQUFDLCtDQUErQyxFQUFFLFlBQU07QUFDeEQsVUFBTSxLQUFLLEdBQUcsMkJBQVcsQ0FBQTtBQUN6QixVQUFNLEdBQUcsR0FBRyxvRkFBb0YsQ0FBQTtBQUNoRyxZQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUM5QyxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL2hvbWUvYWltb3JyaXMvLmF0b20vcGFja2FnZXMvbGludGVyLWVzbGludC9zcGVjL3J1bGVzLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5pbXBvcnQgUnVsZXMgZnJvbSAnLi4vc3JjL3J1bGVzJ1xuXG5kZXNjcmliZSgnVGhlIFJ1bGVzIGNsYXNzJywgKCkgPT4ge1xuICBkZXNjcmliZSgncmVwbGFjZVJ1bGVzJywgKCkgPT4ge1xuICAgIGNvbnN0IHJ1bGVBcnJheSA9IFtcbiAgICAgIFsnZm9vJywgeyBtZXRhOiB7IGZpeGFibGU6IHRydWUgfSB9XSxcbiAgICAgIFsnYmFyJywgeyBtZXRhOiB7fSB9XVxuICAgIF1cblxuICAgIGl0KCdhZGRzIG5ldyBydWxlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJ1bGVzID0gbmV3IFJ1bGVzKClcbiAgICAgIGV4cGVjdChydWxlcy5nZXRSdWxlcygpKS50b0VxdWFsKG5ldyBNYXAoKSlcbiAgICAgIHJ1bGVzLnJlcGxhY2VSdWxlcyhydWxlQXJyYXkpXG4gICAgICBleHBlY3QocnVsZXMuZ2V0UnVsZXMoKSkudG9FcXVhbChuZXcgTWFwKHJ1bGVBcnJheSkpXG4gICAgfSlcblxuICAgIGl0KCdyZW1vdmVzIG9sZCBydWxlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJ1bGVzID0gbmV3IFJ1bGVzKClcbiAgICAgIHJ1bGVzLnJlcGxhY2VSdWxlcyhydWxlQXJyYXkpXG4gICAgICBleHBlY3QocnVsZXMuZ2V0UnVsZXMoKSkudG9FcXVhbChuZXcgTWFwKHJ1bGVBcnJheSkpXG4gICAgICBydWxlcy5yZXBsYWNlUnVsZXMoW10pXG4gICAgICBleHBlY3QocnVsZXMuZ2V0UnVsZXMoKSkudG9FcXVhbChuZXcgTWFwKCkpXG4gICAgfSlcblxuICAgIGl0KCd1cGRhdGVzIHRoZSBmaXhhYmxlUnVsZXMgbGlzdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJ1bGVzID0gbmV3IFJ1bGVzKClcbiAgICAgIGV4cGVjdChydWxlcy5nZXRGaXhhYmxlUnVsZXMoKSkudG9FcXVhbChbXSlcbiAgICAgIHJ1bGVzLnJlcGxhY2VSdWxlcyhydWxlQXJyYXkpXG4gICAgICBleHBlY3QocnVsZXMuZ2V0Rml4YWJsZVJ1bGVzKCkpLnRvRXF1YWwoWydmb28nXSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdnZXRSdWxlVXJsJywgKCkgPT4ge1xuICAgIGl0KCd3b3JrcyB3aXRoIHJ1bGVzIHRoYXQgZGVmaW5lIHRoZWlyIG93biBVUkwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBydWxlcyA9IG5ldyBSdWxlcygpXG4gICAgICBydWxlcy5yZXBsYWNlUnVsZXMoW1snZm9vJywgeyBtZXRhOiB7IGRvY3M6IHsgdXJsOiAnYmFyJyB9IH0gfV1dKVxuICAgICAgZXhwZWN0KHJ1bGVzLmdldFJ1bGVVcmwoJ2ZvbycpKS50b0JlKCdiYXInKVxuICAgIH0pXG5cbiAgICBpdCgnd29ya3Mgd2l0aCBydWxlcyBkZWZpbmVkIGluIGVzbGludC1ydWxlLWRvY3VtZW50YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBydWxlcyA9IG5ldyBSdWxlcygpXG4gICAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL2Jlbm1vc2hlci9lc2xpbnQtcGx1Z2luLWltcG9ydC9ibG9iL21hc3Rlci9kb2NzL3J1bGVzL25vLWR1cGxpY2F0ZXMubWQnXG4gICAgICBleHBlY3QocnVsZXMuZ2V0UnVsZVVybCgnaW1wb3J0L25vLWR1cGxpY2F0ZXMnKSkudG9CZSh1cmwpXG4gICAgfSlcblxuICAgIGl0KCdnaXZlcyBhIGZhbGxiYWNrIFVSTCBvbiBob3cgdG8gYWRkIGEgcnVsZSBVUkwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBydWxlcyA9IG5ldyBSdWxlcygpXG4gICAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL2pmbWVuZ2Vscy9lc2xpbnQtcnVsZS1kb2N1bWVudGF0aW9uL2Jsb2IvbWFzdGVyL2NvbnRyaWJ1dGluZy5tZCdcbiAgICAgIGV4cGVjdChydWxlcy5nZXRSdWxlVXJsKCdmb28vYmFyJykpLnRvQmUodXJsKVxuICAgIH0pXG4gIH0pXG59KVxuIl19